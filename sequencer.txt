


TODO: interface or application as the term? or view?
https://miro.medium.com/max/1400/0*6w3lPf5orl0ME-XL
https://polynya.medium.com/the-web3-stack-how-web3-will-offer-superior-ux-than-web2-6b8c82709163

Browsers: different views on content?

TODO: browser in the driver/filesystem/OS analogy?

TODO: message or content?

TODO: too many links?

=================================================================================================================
== TODO
=================================================================================================================

- play with mdbook

- think of url/handle/nonce mappings

- think of the other hard problems


=================================================================================================================
== other
=================================================================================================================






## Content & interface architectures

- store content off-chain ==> infinite horizontal scalability

infinite amounts of content can be anchored & adressable

think of it as a spine/backbone to which everything attaches to


the stable URL of content is an advertisement of the interface by itself
similar to twitter's client attribution



social networks will become interfaces/views - different compositions of available services that someone pays to have them developed

some level of centralization is required - both for UX and for the sophistication of services. The sheer scale of the public web is daunting.
AWS-like stuff incoming

different AWS-like services will index, process & filter data differently based on different moderation policies. But anyone could enter the business

Social media will be broken by verticals and companies will compete to offer services








=================================================================================================================
== Addressability: host/app vs data/name centric
=================================================================================================================







- DNS
    DNS was the original “decentralization”.
    RSS was an attempt for the next iteration
    How do you store your friend list?
    But rss is too technical
    Dns got overloaded too many times

- host/app-centric vs data/name centric
    We are dominated by platforms & applications when in reality data is the most important thing - we need to be able to address it.
    host/app-centric addressing needs to go away.

    The web should move away from the host (ip/domain) and application-specific model towards data-centric

    https://en.wikipedia.org/wiki/Data-centric_computing
    https://en.wikipedia.org/wiki/Named_data_networking
    https://en.wikipedia.org/wiki/Data-centric_computing
    NDN lacks a global name registry

    - deduplication
- names/handles


- archivability, shifting sands
    - data vs entire webpage content
    - push vs pull
    
    Include a case study with balaji and his post with archived links for permanence - all the data could even be bundled with crypto proofs
    case study: Balaji uses the interet archive for stable links to some of the links
    
    
    Balaji is future-proofing his writings by using archived URLs by default when referring to articles even though they are still around!
    [Example](https://balajis.com/synthesis/): look what `"Prussian"` in that text is [pointing to](https://archive.ph/O2D45).

- indexing
    The block explorers for Headjack would be the next Google.
    block explorers are the future of browsing
    https://twitter.com/balajis/status/1406400770581303297
- addressing
    - stable URLs
    STABILITY !!!
    - extensible

TODO: talk about PUSH vs PULL & how that relates to RSS - on the main page.

The network effect is not related to data fetching and the implementation of that but of stable data addressing and user connections.










Headjack - free the world's information by making it portable & addressable


Data needs to be removed from the grip of host/app-centric monopolies

interlinking data and allowing different views to be used will reduce the effect of echo chambers


https://en.wikipedia.org/wiki/Tamper-evident_technology








reinventing the semantic web 
https://en.wikipedia.org/wiki/RDFa

data-centric architectures are a paradigm shift




Stable URLs, deduplicating content & anchoring everything to a single backbone greatly improves the indexability of the web.

the addition of a global singleton of access control management and key registry solves a lot of problems in NDN around security

headjack is the index for web-scale content/information centric networking
https://en.wikipedia.org/wiki/Content_centric_networking







A global index of all content throughout time in an Information-centric network - a form of named data networking layered on top of the current host-centric model (client-server connections through IP & DNS)

Differences from NDN: builds on the current internet infrastructure, doesn't have the same packet types and routing concepts - utilizes technologies that are currently available.




https://en.wikipedia.org/wiki/Future_Internet



linking data is easier under a common global namespace
https://en.wikipedia.org/wiki/Linked_data

linking data based on URIs in a host-centric internet architecture is inherently flawed - needs to be in a named data paradigm

https://en.wikipedia.org/wiki/Hyperdata





=================================================================================================================
== other
=================================================================================================================



## what this approach gets right

- Integers are the most well known and easy to work with data type
faster/easier indexing & queries than content addressing, hashes, keypairs & signatures

Compatible with any DID - just a graph & Idx/keys/DIDs associations
No problem linking/using multiple keys (also different signature algos)
Just publish the pubkey & sign a message with the private keys


separation of concerns
separation of concerns - UNIX philosphy - solve 1 vertical well
https://en.wikipedia.org/wiki/Separation_of_concerns

Headjack does not assume that the economy built around it would be paid in its own native token - any type of micro payment or business model can be done using any other tech - the native token is strictly for paying for block space. - separation of concerns
It makes no assumptions nor impose constraints for what would be built around it and how to make it self-sustaining


main advantages for headjack
- uniform addressability, deduplicating content, much more referencability
- push vs pull for updates
- separating views from infrastructure - infra can be distributed

Contrast this to what the [other attempts](competition.md).




## Why (short)

## Why monopolies are bad

TODO: maybe in the why.md document and not in the main readme?

Cold start problem

0 accountability

- bias
- black box algos
- no voice and exit
- lack of innovation & composability
- extremely high barrier to entry for startups

The story of our times - fragmentation.
Fragmentation aids polarization and radicalization
Culture war

Protocols, Not Platforms: A Technological Approach to Free Speech
https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech

Content moderation is orthogonal to amplification through algos
The most important is the architecture of virality
The dynamics of interaction and amplification/recommendation


Data needs to be liberated from silos and monopolies - make them play on an equal footing and you will get more innovation


The people writing the algorithmic feeds are the most powerful in the world
https://youtu.be/3qHkcs3kG44?t=3616



Google's mission is to organize the world's information and make it universally accessible and useful.
Headjack's mission is to end network effect monopolies & make identity & data interoperable.






