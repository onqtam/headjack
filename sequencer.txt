


TODO: interface or application as the term? or view?
https://miro.medium.com/max/1400/0*6w3lPf5orl0ME-XL
https://polynya.medium.com/the-web3-stack-how-web3-will-offer-superior-ux-than-web2-6b8c82709163

Browsers: different views on content?

TODO: browser in the driver/filesystem/OS analogy?

TODO: message or content?

TODO: too many links?

TODO: too much buzzwords in introduction?

=================================================================================================================
== TODO
=================================================================================================================

- think of url/handle/nonce mappings

- think of the other hard problems


=================================================================================================================
== other
=================================================================================================================





Most projects never expose front and center their data structures and a credible path to scale - the focus goes on everything else besides the data but in complex systems the data structure dictates what is possible





## Content & interface architectures

- store content off-chain ==> infinite horizontal scalability

infinite amounts of content can be anchored & adressable

think of it as a spine/backbone to which everything attaches to


the stable URL of content is an advertisement of the interface by itself
similar to twitter's client attribution



social networks will become interfaces/views - different compositions of available services that someone pays to have them developed

some level of centralization is required - both for UX and for the sophistication of services. The sheer scale of the public web is daunting.
AWS-like stuff incoming

different AWS-like services will index, process & filter data differently based on different moderation policies. But anyone could enter the business

Social media will be broken by verticals and companies will compete to offer services








=================================================================================================================
== Addressability: host/app vs data/name centric
=================================================================================================================







=================================================================================================================
== other
=================================================================================================================



## what this approach gets right

- Integers are the most well known and easy to work with data type
faster/easier indexing & queries than content addressing, hashes, keypairs & signatures

Compatible with any DID - just a graph & Idx/keys/DIDs associations
No problem linking/using multiple keys (also different signature algos)
Just publish the pubkey & sign a message with the private keys


separation of concerns
separation of concerns - UNIX philosphy - solve 1 vertical well
https://en.wikipedia.org/wiki/Separation_of_concerns

Headjack does not assume that the economy built around it would be paid in its own native token - any type of micro payment or business model can be done using any other tech - the native token is strictly for paying for block space. - separation of concerns
It makes no assumptions nor impose constraints for what would be built around it and how to make it self-sustaining


main advantages for headjack
- uniform addressability, deduplicating content, much more referencability
- push vs pull for updates
- separating views from infrastructure - infra can be distributed

Contrast this to what the [other attempts](competition.md).




## Why (short)

## Why monopolies are bad

TODO: maybe in the why.md document and not in the main readme?

Cold start problem

0 accountability

- bias
- black box algos
- no voice and exit
- lack of innovation & composability
- extremely high barrier to entry for startups

The story of our times - fragmentation.
Fragmentation aids polarization and radicalization
Culture war

Protocols, Not Platforms: A Technological Approach to Free Speech
https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech

Content moderation is orthogonal to amplification through algos
The most important is the architecture of virality
The dynamics of interaction and amplification/recommendation


Data needs to be liberated from silos and monopolies - make them play on an equal footing and you will get more innovation


The people writing the algorithmic feeds are the most powerful in the world
https://youtu.be/3qHkcs3kG44?t=3616



Google's mission is to organize the world's information and make it universally accessible and useful.
Headjack's mission is to end network effect monopolies & make identity & data interoperable.






