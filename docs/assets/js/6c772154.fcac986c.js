"use strict";(self.webpackChunkheadjack=self.webpackChunkheadjack||[]).push([[405],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),b=o,f=p["".concat(s,".").concat(b)]||p[b]||m[b]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},1780:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i=void 0,l={unversionedId:"how/unsorted/blob",id:"how/unsorted/blob",title:"blob",description:"an IPFS CID hash nails 2 birds with 1 stone: both a default way to retrieve it + a way to check the integrity even if retrieved not through IPFS",source:"@site/docs/how/unsorted/blob.md",sourceDirName:"how/unsorted",slug:"/how/unsorted/blob",permalink:"/docs/how/unsorted/blob",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"https://png.pngitem.com/pimgs/s/207-2073499_translate-platform-from-english-to-spanish-work-in.png"})),(0,o.kt)("p",null,"an IPFS CID hash nails 2 birds with 1 stone: both a default way to retrieve it + a way to check the integrity even if retrieved not through IPFS"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"blob format?\n",(0,o.kt)("a",{parentName:"li",href:"https://spec.dsnp.org/DSNP/BatchPublications.html"},"https://spec.dsnp.org/DSNP/BatchPublications.html"),(0,o.kt)("a",{parentName:"li",href:"https://github.com/apache/parquet-format"},"https://github.com/apache/parquet-format")),(0,o.kt)("li",{parentName:"ul"},"Parquet is a column-oriented format - but the current design of blobs in Headjack doesn't need more than 1 column about the user ID & offsets."),(0,o.kt)("li",{parentName:"ul"},"Maybe we should let any application/software ingest our simpler blob format into databases & build indexes?"),(0,o.kt)("li",{parentName:"ul"},'maybe we can still have an intra-blob "offset" table or better yet - "parquet chunk" addressing?'),(0,o.kt)("li",{parentName:"ul"},"is it useful to also provide a column of the message type (integer ID) for all messages in a blob?\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/mimblewimble/grin/blob/master/doc/mmr.md"},"https://github.com/mimblewimble/grin/blob/master/doc/mmr.md"))))}m.isMDXComponent=!0}}]);